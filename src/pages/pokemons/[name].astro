---
import type { PokemonList } from "../../interfaces/pokemon-list.interface";
import type { GetStaticPaths } from "astro";
import Title from "../../components/common/Title.astro";
import Layout from "../../layout/layout.astro";
import PokemonCard from "../../components/pokemon/PokemonCard.astro";
import { Icon } from "astro-icon/components";

export const getStaticPaths = (async () => {
  const res = await fetch("https://pokeapi.co/api/v2/pokemon?limit=151");
  const { results } = (await res.json()) as PokemonList;

  const paths = results.map(({ name, url }) => ({
    params: { name },
    props: { name, url },
  }));

  return paths;
}) satisfies GetStaticPaths;

const { name } = Astro.params;
const { url } = Astro.props;
const id = url.split("/").at(-2);
const audioPokemon = `https://raw.githubusercontent.com/PokeAPI/cries/main/cries/pokemon/latest/${id}.ogg`;
const imgPokemon = `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/other/dream-world/${id}.svg`;
---

<Layout
  title={`Pokémon - #${id} ${name}`}
  description={`Información sobre el pokémon ${name}`}
  image={imgPokemon}
>
  <section class="mt-10 md:mx-10 flex flex-col items-center p-2 w-full gap-20">
    <div
      class="flex flex-col text-center justify-center mx-auto items-center w-full"
    >
      <button
        onclick="history.back()"
        class="btn btn-outline btn-secondary md:w-96 my-2"
      >
        Regresar
      </button>
      <h1
        class="my-2 hover:underline hover:text-blue-500 hover:cursor-pointer mb-4 text-4xl font-extrabold leading-none tracking-tight text-gray-900 md:text-5xl lg:text-6xl"
      >
        This is your pokemon selected:
      </h1>
    </div>

    <div class="flex flex-col md:flex-row items-center md:justify-start gap-5">
      <div class="order-2 md:order-1 flex justify-center w-[300px] md:w-full">
        <PokemonCard url={url} isBig={true} />
      </div>
      <div
        class="text-center md:text-start flex order-1 md:order:2 md:self-start md:w-full px-2 md:px-10 md:py-20 rounded-2xl"
      >
        <Title>#{id}-{name}</Title>
        <button id="btn-favorite" class="mx-4" data-name={name} data-id={id}>
          <Icon data-outline name="heart-outline" size={50} />
          <Icon data-full class="hidden" name="heart-full" size={50} />
        </button>
      </div>
    </div>
    <div
      class="fixed bottom-0 left-0 z-50 grid w-full h-auto px-8 bg-white border-t border-gray-200 md:grid-cols-3 dark:bg-gray-700 dark:border-gray-600"
    >
      <div class="items-center justify-center mx-auto flex p-4">
        <img class="w-12" src={imgPokemon} alt={name} />
        <span
          class="mx-2 text-xl font-semibold text-gray-500 dark:text-gray-400"
          >{name} Audio</span
        >
      </div>
      <div class="flex items-center mx-auto p-2">
        <audio class="rounded-xl flex justify-center" controls>
          <source src={audioPokemon} />
        </audio>
      </div>
    </div>
  </section>
</Layout>

<script>
  import { type PokemonFavorite } from '../../interfaces/favorite-pokemon';

  const handlePageLoad = () => {
    let favoritePokemons: PokemonFavorite[] = JSON.parse(
      localStorage.getItem("favorites") ?? "[]"
    );
    //console.log(favoritePokemons)

    const buttonFav = document.querySelector(
      "#btn-favorite"
    ) as HTMLButtonElement;

    if (!buttonFav) return; // Opcional: Manejar el caso en que no se encuentra el botón

    const name = buttonFav.dataset.name ?? '';
    const id = Number(buttonFav.dataset.id) ?? '';
    const isFavorite = favoritePokemons.some((pokemon) => pokemon.name === name)
    const heartOutline = buttonFav.querySelector(
      "[data-outline]"
    ) as HTMLElement;
    const heartfull = buttonFav.querySelector("[data-full]") as HTMLElement;

    //TODO: hacer funcion que verifique si el pokemon existe en el local storage y a partir de eso mostrar o no el corazon lleno/vacio

  const toggleHeart = () => {
  // si esto da true, el pokemon de la pagina ya existe y esta en el local storage, y lo contrario si da false
  if(isFavorite){
    heartOutline.classList.add('hidden')
    heartfull.classList.remove('hidden');
  } else {
    heartfull.classList.add('hidden');
  }



  }




    const toggleFavorite = () => {
      const isFavorite = favoritePokemons.some((pokemon) => pokemon.name === name)


      if (isFavorite){
        //remover
        favoritePokemons = favoritePokemons.filter( fav => fav.name !== name)
      }else {
        //agregar

        favoritePokemons.push({
          id: +id,
          name: name
        })
      }


      localStorage.setItem('favorites', JSON.stringify(favoritePokemons))
    }

    buttonFav.addEventListener("click", () => {
      //hacer toggle, como lo hago?
      heartOutline.classList.toggle("hidden");
      heartfull.classList.toggle("hidden");
      //console.log({ name, id, heartOutline, heartfull });

      toggleFavorite()
    });
    toggleHeart()
  };

  document.addEventListener("astro:page-load", handlePageLoad);
  //console.log(name, id) // Output: name of pokemon
</script>

<style></style>
